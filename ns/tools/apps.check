#!/home/s/ops/perl/bin/perl
use strict;
use warnings;
use File::Spec;

use NS::Util::OptConf;

use YAML::XS;
use NS::Util::AppsCheck;
use Sys::Hostname;
use FindBin qw( $RealBin );

$| ++;


use NS::OpenAPI::AppsCheck;
my $openapi = NS::OpenAPI::AppsCheck->new();
my %o = NS::Util::OptConf->load()->get( qw( apps=s range=s print verbose ) )->dump();

my $arg=''; map{ $arg .= $o{$_} ? " --$_ " : '' } qw( print verbose );
my $app = $o{apps} ? " --apps $o{apps}  ":'';

exec "$RealBin/mcmd -r '$o{range}' \"$0 $app $arg {}\"" if $o{range};

my ( @ctrl, %macro );
map{ 
    if( $_ =~ /^([^=]+)=(.*)/ )
    {
        $macro{$1} = $2;
    }
    else { push @ctrl, $_; }

}@ARGV;
my $node = shift @ctrl || hostname;

my $data = $openapi->dump( $ENV{HOSTNAME} || $node );
unless( $o{apps} )
{
    print "apps:\n";
    map{ print "  $_\n"; } sort keys %$data;
    exit;
}

my $apps = NS::Util::AppsCheck->new( data => $data, map{ $_ => $o{$_} }qw{ print verbose } );

my $t = $o{apps};
$apps->do( 
    macro => \%macro, 
    apps =>  $o{apps} eq '...' 
             ?  [ keys %$data ] 
             : $t =~ s#^/## &&  $t =~ s#/$## 
               ? [ grep{ $_ =~ /$t/ }keys %$data ] 
               : [ split ',', $o{apps}],
    ctrl => \@ctrl,
    node => $node
);
