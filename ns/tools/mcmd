#!/home/s/ops/perl/bin/perl

use strict;
use warnings;

use NS::Hermes;
use NS::Util::OptConf;
use NS::Util::MCMD;

use Data::Dumper;
$| ++;

$NS::Util::OptConf::ARGC = -1;
@NS::Util::OptConf::CONF = qw( pass_through );

=head1 SYNOPSIS

 $0 -r range [--timeout seconds] [--max number] [--noop] [--proxy] cmd ..
 
  [--proxy-name foo] [--proxy-timeout 86400] [--proxy-max 32]

=cut
my $option = NS::Util::OptConf->load();
my %o = $option->get( 
    qw( range=s timeout=i max=i noop proxy proxy-name=s proxy-timeout=i proxy-max=i )
)->dump();

$option->assert( 'range' );

my $range = NS::Hermes->new( $option->dump( 'range' ) );

my $mcmd = NS::Util::MCMD->new(  $range->load( delete $o{range} )->list );

my $proxy = $o{'proxy-name'} || $o{proxy};

$mcmd->proxy( sprintf "%s/proxy/$proxy", $option->get()->dump('poros')->{conf} ) if $proxy;

my %result = $mcmd->run( %o, cmd => \@ARGV );

my %mesg;
while ( my ( $io, $mesg ) = each %result )
{
    while ( my ( $mesg, $node ) = each %$mesg )
    {
        push @{ $mesg{$io} }, join ': ', $range->load( $node )->dump, $mesg;
    }
}

for my $io ( sort keys %mesg )
{
    print "---\n$io:\n";
    map { print "  $_" } @{ $mesg{$io} };
}

exit 0;
