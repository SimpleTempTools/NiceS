#!/home/s/ops/perl/bin/perl
use strict;
use warnings;

use Sys::Hostname;
use NS::Hermes;
use NS::Util::OptConf;
use NS::OpenAPI::Ctrl;
use NS::OpenAPI::Lock;

$| ++;

=head1 SYNOPSIS

 $0 apps [--name name] [--step step] [--pause] [--clear] [--resume]  \
             [--exclude range] [--unlock apps]  [--kill apps] [--exit]
    
=cut

my $option = NS::Util::OptConf->load();
my %o = $option->get(qw( name=s step=s pause clear resume exclude=s unlock=s kill=s exit ))->dump();

my $range = NS::Hermes->new( $option->dump( 'range' ) );
my ( @name, @list ) = map { $range->load( $_ )->list() } @ARGV;
my $who = operator();

for my $name ( @name )
{
    my $ctrl = NS::OpenAPI::Ctrl->new( name => $name );

    if( $o{pause} )
    {
        map{ $o{$_} ||= 'any' }qw( name step );
        $ctrl->pause( @o{qw( name step )}, $who );
    }
    elsif( $o{exit} )
    {
        map{ $o{$_} ||= 'any' }qw( name step );
        $ctrl->pause( 'exit',@o{qw( name step )}, $who );
    }
    elsif( $o{clear} )
    {
        $ctrl->clear();
    }
    elsif( $o{resume} )
    {
        $ctrl->resume( ( $o{name} && $o{step}) ? @o{qw( name step )}: $o{name} ? $o{name} : () );
    }
    elsif( $o{exclude} )
    {
        $ctrl->exclude( $range->load( $o{exclude} )->list() );
    }
    elsif( $o{unlock} && $o{unlock} eq $name )
    {
        NS::OpenAPI::Lock->new( name => $name )->unlock();
    }
    elsif( $o{kill} && $o{kill} eq $name )
    {
        my $lock = NS::OpenAPI::Lock->new( name => $name )->dump( );
        my $hostname = hostname;
            
        for( grep{ $_->[0] eq $name }@$lock )
        {
            my ( $host, $pid ) = ( $_->[1], $_->[2] );
            die "host $host no match $hostname\n" unless $host eq $hostname;

            my $cmdline = `cat '/proc/$pid/cmdline'`;
            die "pid cmdline no match deployx\n" unless $cmdline && $cmdline =~ /deployx/;

            print "kill -10 $pid\n";
            kill 10, $pid;
        }
    }
}

exit 0;

sub operator
{
    my $name = `logname`; chop $name; return $name;
}

