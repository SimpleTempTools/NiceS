#!/home/s/ops/perl/bin/perl: deploy/code/m.mail
use strict;
use Encode;
use Data::Dumper;
use Mail::Send;
use Mail::Sendmail;
use Digest::MD5;
use YAML::XS;

use NS::Hermes;
use NS::OpenAPI::DeployMailAuth;

return sub
{
    my %param = @_;

    my ( $batch, $param, $sc, $name, $user, $myid, $title, $step ) 
      = @param{qw( batch param sc name user myid title step )};

     return map{ $_ => 1 }@{$param{batch}}
         if $param->{only} && ref $param->{only} eq 'ARRAY'
            && 0 == grep{ $_ == $step }@{$param->{only}};

    my $msg = Mail::Send->new;

    return unless $param->{to} && ref $param->{to} eq 'ARRAY';
    my $cache = NS::OpenAPI::Deploy->new( name => $name )->logs( $myid );
    my $range = NS::Hermes->new();

    my $head = '<!DOCTYPE html>';
    $head .= '<html><head><title>Title of the document</title></head><body>';
    $head .= '<table border="1" width="90%" cellpadding="0" cellspacing="0">';
    my $tail = '</table></body></html>';
    my $body = '';

    map
    {
        $body .= sprintf "<tr align=\"center\"><td bgcolor=\"CornflowerBlue\">%s</td> <td>%s</td></tr>", map{ $_||''}@$_;
    }
    (
      [ '流程名', $name ],
      [ '发布时间', $myid ],
      [ sprintf( "机器[%d]", scalar $range->load( $batch )->list ), $range->load( $batch )->dump ],
      [ '参数', $cache->{info}{argv} ? join( ' ', grep{ /=/ }split / /, $cache->{info}{argv}) : '' ],
      [ '操作者', $user ],
      [ '详情', $param->{info} ],
    );

     my %mail = (
         From    => 'deploy@here.com',
         Subject => sprintf( "deploy report: $name %s", POSIX::strftime( "%F_%T", localtime )),
         'Content-Type' => 'text/html; charset=utf8',
     );
    
 
    my ( %body, %auth, %user );
    if( $param->{auth} )
    {
        my @chars = ( "A" .. "Z", "a" .. "z", 0 .. 9, qw( ! @ $ % ^ & *) );
        %user = map{ 
            $_ => time.Digest::MD5->new->add( 
                join("", @chars[ map { rand @chars } ( 1 .. 128 ) ] ) .YAML::XS::Dump \%param
                       )->hexdigest;
        }@{$param->{to}};
        %auth = map{ $user{$_} => $_ }keys %user;

        %body = 
        map{ 
            $_ => "<tr align=\"center\"><td bgcolor=\"CornflowerBlue\">确认服务正常</td>
                   <td><a href='http://openapi.nices.net/openapi/deploymailauth/s?data=$user{$_}'>确认</a></td></tr>", 
        } keys %user;
    }

    map{ 
        print "mail to $_ $user{$_}\n";
        $body{$_} ||='';
        sendmail(%mail, To => $_, Message => $head.$body.$body{$_}.$tail ) 
            or die $Mail::Sendmail::error; 
    }@{$param->{to}};
    
    if( $param->{auth} )
    {
        print "Wait to be authorized\n";
        my ( $mark, $time ) = ( time, $param->{time} || '1800' );
        my $openapi = NS::OpenAPI::DeployMailAuth->new();
        while(1)
        {
            my $auth = $openapi->o( map{ ( "$_.ok", "$_.ko" ) }values %user );
            if( $auth && @$auth )
            {
                if( my @ko = grep{ /\.ko$/ } @$auth )
                {
                    map{ print "refuse: auth from $auth{$_} $_\n";}@ko;
                    return ();
                }
                if( my @ko = grep{ /\.ok$/ } @$auth )
                {
                    map{ my $t = $_; $t =~ s/\.\w{2}$//; print "agree: auth from $auth{$t} $_\n";}@ko;
                    return map{ $_ => 1 }@$batch;
                }

            }
            die "No one confirmed for more than $time seconds.\n" if time - $mark > $time;
            sleep 3;
        }
    }

    return map{ $_ => 1 }@$batch;
};


#
#return sub
#{
#    my %param = @_;
#
#    my ( $batch, $param, $sc, $name, $myid, $title ) 
#      = @param{qw( batch param sc name myid title )};
#
#    my $msg = Mail::Send->new;
#
#    return unless $param->{to} && ref $param->{to} eq 'ARRAY';
#    my $cache = NS::OpenAPI::Deploy->new( name => $name )->logs( $myid );
#
#    $msg->to( @{$param->{to}} );
#    $msg->subject( "deploy report: $name $myid" );
#    my $fh = $msg->open( 'sendmail' );
#
##    binmode $fh, ':utf8';
#
#    my $data = "\n\n分批:\n";
#    my $range = NS::Hermes->new();
#    for my $node ( @{$cache->{node}} )
#    {
#        $data .= sprintf "[%s]:%s\n",
#            scalar $range->load( $node )->list(), $range->load( $node )->dump;
#    }
#
#    $data .= "\n\n成功:\n";
#    for ( 0 .. @{$cache->{step}} - 1  )
#    {
#         my $step = $cache->{step}[$_];
#         next if $step =~ /^mail/;
#         my @succ = ( $cache->{succ}{$step} ) ? keys %{$cache->{succ}{$step}} : ();
#         $data .= sprintf "%s : $step:\t[%s]:%s\n", $cache->{glob}[$_] ? 'Glob ' : 'Batch',
#             ,scalar $range->load( \@succ )->list(), $range->load( \@succ )->dump;
#    }
# 
#    printf $fh "流程名: %s\n", $name;
#    printf $fh "发布时间：%s\n", $myid;
#    printf $fh "套餐：%s\n", $cache->{info}{main} if $cache->{info}{main};
#    printf $fh "配置：%s\n", $cache->{info}{conf} if $cache->{info}{conf};
#
#    print $fh $data;
#
#    $fh->close or die "couldn't send whole message: $!\n";
#
#    return map{ $_ => 1 }@$batch;
#};
