#!/home/s/ops/perl/bin/perl: deploy/code/b.node
use warnings;
use strict;
use File::Spec;
use Sys::Hostname;

use NS::Util::OptConf;
use NS::Hermes;

return sub
{
    my ( %param, @batch ) = @_;

    my $target = $param{target};

    my $range = NS::Hermes->new( NS::Util::OptConf->load()->dump( 'range' ) );
    my ( $db, %broken, %exclude ) = $range->db;

    map{
        push @{$broken{$_->[0]}}, [ $_->[1],$_->[2]];
    }$db->select( 'node,attr,info', name => [ 1, 'broken' ] );

    for my $target ( @$target )
    {
        my @node = sort grep{ ! $broken{$_} }
                   map{ $exclude{$_} = 1 if $broken{$_}; $_ }
                   $range->load( $target->[0] )->list;

        my @bindex = split /:/, $target->[1];

        if( my $sort = $param{sort} )
        {
            $sort = '(\d+)' if $sort eq 'D';
            my %N = map{ $_ =~ /$sort/; $_ => $1 || 0 }@node;
            @node = sort{ $N{$a} <=> $N{$b} }keys %N;
        }

        if( my $each = $param{each} )
        {
            $each = '\.(\w+?)\d?\.nices\.net$' if $each eq 'idc';

            my ( %type, %count );
            map{ $_ =~ /$each/; push @{$type{$1||'null'}}, $_; }@node;
            map{ $count{$_} = scalar @{$type{$_}}}keys %type;

            for ( my $gindex = 0; %type; $gindex ++ )
            {
                 my $index = $gindex > $#bindex ? $#bindex : $gindex;
                 my $tmp;
                 map{
                     my $c = $bindex[$index] < 1 ? ( $bindex[$index] * $count{$_} ) + 0.9999 : $bindex[$index];
                     push @$tmp, splice @{$type{$_}}, 0, $c;
                     delete $type{$_} unless @{$type{$_}};
                 }keys %type;
                 push @batch, $tmp;
            }
        }
        else
        {
            my $count = scalar @node;
            for ( my $gindex = 0; @node; $gindex ++ )
            {
                my $index = $gindex > $#bindex ? $#bindex : $gindex;
                my $c = $bindex[$index] < 1 ? ( $bindex[$index] * $count ) + 0.9999 : $bindex[$index];
                push @batch, [ splice @node, 0, $c ];
            }
        }

    }

    map{ printf "[%d]: [%s]\n", scalar $range->load($_)->list, $range->load($_)->dump }@batch;

    if( @batch && $param{test} )
    {
        printf "[WARN] The test pattern:%s\n", $batch[0][0];
        @batch = $batch[0][0]? ([$batch[0][0]]): ();
    }

    map
    {
       printf "[Warn] $_ in broken table=>%s\n", join "#", map{ join ":", @$_ } @{$broken{$_}}
    }keys %exclude;

    return @batch;
};
