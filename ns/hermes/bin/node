#!/home/s/ops/perl/bin/perl

use strict;
use warnings;
use YAML::XS;

use NS::Hermes;
use NS::Hermes::DBI::Root;
use NS::Hermes::DBI::Cache;
use NS::Util::OptConf;
use NS::Util::Sudo;

NS::Util::Sudo->sudo();

use constant DOWN => 1;

$| ++;

$NS::Util::OptConf::THIS = 'hermes';

=head1 SYNOPSIS

Modfiy hermes databases for nodes

 $0 [--range nodes] [--value value] \
    [--cluster clusters] [--table tables] [--quiet]

=cut
my $option = NS::Util::OptConf->load();
my %o = $option->get( qw( range=s value=s cluster=s table=s quiet ) )->dump();

my %range = $option->dump( 'range' );
my $range = NS::Hermes->new( %range );
my $cache = NS::Hermes::DBI::Cache->new( $range{cache} );

my %table = map { $_ => 1 } $range->load( $o{table} || [] )->list();
my %cluster = map { $_ => 1 } $range->load( $o{cluster} || [] )->list();
my ( $value, %db ) = defined $o{value} ? $o{value} : DOWN;

for my $node ( $range->load( $o{range} )->list() )
{
    for my $record ( $cache->select( '*', node => [ 1 => $node ] ) )
    {
        my $cluster = shift @$record;

        next if %cluster && ! $cluster{$cluster};
        next if %table && ! $table{$record->[0]};

        $db{$cluster}{handle} ||= NS::Hermes::DBI::Root
            ->new( File::Spec->join( $o{root}, $cluster ) );

        $record->[-1] = $value;
        push @{ $db{$cluster}{record} }, $record;
    }
}

for my $cluster ( sort keys %db )
{
    my $db = $db{$cluster};
    warn "$cluster:\n" unless $o{quiet};

    for my $record ( @{ $db->{record} } )
    {
        warn sprintf "  %s\n", join( ': ', @$record ) unless $o{quiet};
        $db->{handle}->insert( @$record );
    }
}

exit 0;
