#!/home/s/ops/perl/bin/perl

use strict;
use warnings;

use YAML::XS;
use Sys::Hostname;

use NS::Hermes;
use NS::Util::OptConf;
use Data::Dumper;

$| ++;

=head1 SYNOPSIS

 $0 [list of nodes]

=cut

my $range = NS::Hermes->new( NS::Util::OptConf->load()->dump( 'range') );
my $db = $range->db;

my ( @r, %c, %r, @n ) = ( 0, 0 );
for my $node ( sort( @ARGV ? map { $range->load( $_ )->list } @ARGV : hostname ) )
{
    if ( my @cluster = $db->select( 'name,attr,info', node => [ 1, $node ] ) )
    {
        map{
            $r{cluster}{$_->[0]} ++;
            my $idc = $_->[1];
            $idc =~ s/@\d+$//;
            $r{idc}{$idc}++;
        }@cluster;

        printf "$node => %s\n", join '||', map{ join ':', @$_ }@cluster;
        $r[0] ++; $c{scalar @cluster} ++;
    }
    else { $r[1] ++; push @n, $node }
}

printf "\ntotal: %d\nFound:%s %s %s\nNot Found:%s %s %s\n\n", 
    $r[0]+$r[1] , $r[0], %c ? '=': '', 
    sprintf( join ' + ', map{ "$_:$c{$_}" }keys %c ), $r[1], 
    $r[1] ? '=' : '',
    $r[1] ? $range->load( \@n )->dump: '';

exit unless %r;

for my $type ( qw( cluster idc ) )
{
    print "$type:\n";
    map{ print "  $_: $r{$type}{$_}\n";}
        sort{ $r{$type}{$b} <=> $r{$type}{$a} }
            keys %{$r{$type}};
}
