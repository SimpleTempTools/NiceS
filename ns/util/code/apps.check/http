#!/home/s/ops/perl/bin/perl: http
use strict;
use Data::Dumper;

use Encode;

#code: http
#param:
#  http: http://{}/stat
#  check: 'ok'
#  from:
#    a: 1
#    b: 2
#  data: a=1&b=2
#

return sub
{
    my %param = @_;

    my ( $node, $param, $verbose ) = @param{qw( node param verbose )};

    $param->{http} =~ s/{}/$node/g;
    Encode::_utf8_off( $param->{http} );
    Encode::_utf8_off( $param->{check} ) if defined $param->{check};

    my %opt = $param->{http} =~ /^https/ ? ( ssl_opts => { verify_hostname => 0 } ) :();
    my $ua = LWP::UserAgent->new( %opt );
    $ua->agent('Mozilla/9 [en] (Centos; Linux)');
    $ua->timeout( 10 );
    $ua->default_header ( 'Cache-control' => 'no-cache', 'Pragma' => 'no-cache', Host => $param->{Host} );

   my %post = ( 
       $param->{from} ? %{$param->{from}} : () , 
       $param->{data} ? ( Content => $param->{data}) : ()
   );
   my $res = keys %post
        ? $ua->post( $param->{http}, $param->{from} )
        : $ua->get( $param->{http} );

   my $content = $res->is_success ? $res->content : undef;

   print "$content\n" if $content && $verbose;

   my $info = $param->{check} || '';

   (   ( defined $content ) 
    && ( ! defined $param->{check} || $param->{check} eq '' || $content =~ /$param->{check}/ )
   )
       ? print "$param->{http} <> $info :OK\n"
       : die "$param->{http} <> $info :FAIL\n";
   
    return 1;
};
