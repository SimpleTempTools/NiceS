#!/home/work/nices/perl/bin/perl
use warnings;  
use strict;  
  
use File::Spec;
use NS::Util::OptConf;
use NS::Poros::Client;

use Time::HiRes qw(time);  
use AnyEvent;  
use AnyEvent::Impl::Perl;  
use AnyEvent::Socket;  
use AnyEvent::Handle;  
use Digest::MD5;
  
use NS::Poros::Query;
use Fcntl qw(:flock SEEK_END);
use Data::Dumper;
 
$| ++;

=head1 SYNOPSIS

 $0 -host host

=cut

$NS::Util::OptConf::THIS = 'poros';
my $option = NS::Util::OptConf->load();
my %o = $option->get( qw( range=s ) )->dump();

$option->assert( 'range' );


my $cv = AE::cv;  

my $scan = `nc -z localhost 65111-65333`;
my %open = map{ $_ => 1 }my @open = $scan =~ / (\d+) /g;

my ( $listen ) = grep{ ! $open{$_} }65111 .. 65333 ;

if( fork ) { exec "nc -l $listen"; }

print "listen shell on:$listen\n";
my $query = NS::Poros::Query->dump(+{ 
    code => 'shell',
    logname => operator(),
    argv => [ undef, $listen ]
});

tcp_connect $o{range}, $o{port}, sub {  
   my ( $fh ) = @_  or die "tcp_connect: $!";  
   my $hdl; $hdl = new AnyEvent::Handle( 
           fh => $fh,
           on_read => sub {
               my $self = shift;
               $self->unshift_read (
                   chunk => length $self->{rbuf},
                   sub { }
               );
            },

            on_eof => sub{
                undef $hdl;
                 $cv->send;  
             }
   );  

   $hdl->push_write($query);  
   $hdl->push_shutdown;
};  

$cv->recv;  

exit;

sub operator
{
    my $name = `logname`; chop $name; return $name;
}
